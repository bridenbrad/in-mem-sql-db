/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.sql.exec.operator.physical.scan.filter.buffer;

import java.nio.ByteBuffer;
import java.util.Set;

import com.tirion.common.type.Type;
import com.tirion.db.sql.exec.operator.physical.scan.rowid.sink.RowIdSink;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic
 */
public abstract class DoubleBufferFilter extends AbstractBufferFilter {

	public DoubleBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer) {
		super(rowIdSink, startRowId, startPosition, count, buffer);
	}

	public static final class DoubleBetweenBufferFilter extends DoubleBufferFilter {

		private final double low;
		private final double high;
		
		public DoubleBetweenBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer, double low, double high) {
			super(rowIdSink, startRowId, startPosition, count, buffer);
			this.low = low;
			this.high = high;
		}

		@Override
		public void apply() {	
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							final double value = buffer.getDouble(position);
							if(low <= value && value <= high) {
					rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class DoubleInBufferFilter extends DoubleBufferFilter {

		private final Set<Double> set;

		public DoubleInBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer, Set<Double> set) {
			super(rowIdSink, startRowId, startPosition, count, buffer);
			this.set = set;
		}

		@Override
		public void apply() {	
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							final double value = buffer.getDouble(position);
							if(set.contains(value)) {
					rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static abstract class SimpleDoubleBufferFilter extends DoubleBufferFilter {
		
		protected final double value;

		public SimpleDoubleBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer);
			this.value = value;
		}
	}
	
	public static final class DoubleEqBufferFilter extends SimpleDoubleBufferFilter {

		public DoubleEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			long rowId = startRowId;
			int position = startPosition;
			for (int i = 0; i < count; i++) {
							if(buffer.getDouble(position) == value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class DoubleNeqBufferFilter extends SimpleDoubleBufferFilter {

		public DoubleNeqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.getDouble(position) != value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class DoubleLtBufferFilter extends SimpleDoubleBufferFilter {

		public DoubleLtBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.getDouble(position) < value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class DoubleLtEqBufferFilter extends SimpleDoubleBufferFilter {

		public DoubleLtEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.getDouble(position) <= value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class DoubleGtBufferFilter extends SimpleDoubleBufferFilter {

		public DoubleGtBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.getDouble(position) > value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class DoubleGtEqBufferFilter extends SimpleDoubleBufferFilter {

		public DoubleGtEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, double value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.getDouble(position) >= value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.DOUBLE.getWidth();
				++rowId;
			}
		}
	}
}