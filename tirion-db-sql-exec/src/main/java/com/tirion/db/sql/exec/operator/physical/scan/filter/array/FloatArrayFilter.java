/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.sql.exec.operator.physical.scan.filter.array;

import java.util.Set;

import com.tirion.db.sql.exec.operator.physical.scan.rowid.sink.RowIdSink;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic, Copyright (C) All Rights Reserved
 */
public abstract class FloatArrayFilter extends AbstractArrayFilter {

	protected final float[] array;
	
	public FloatArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array) {
		super(rowIdSink, startRowId);
		this.array = array;
	}
	
	public static final class FloatBetweenArrayFilter extends FloatArrayFilter {

		private final float low;
		private final float high;
		
		public FloatBetweenArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float low, float high) {
			super(rowIdSink, startRowId, array);
			this.low = low;
			this.high = high;
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(low <= array[i] && array[i] <= high) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class FloatInArrayFilter extends FloatArrayFilter {

		private final Set<Float> set;

		public FloatInArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, Set<Float> set) {
			super(rowIdSink, startRowId, array);
			this.set = set;
		}

		@Override
		public void apply() {	
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(set.contains(array[i])) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static abstract class SimpleFloatArrayFilter extends FloatArrayFilter {
		
		protected final float value;

		public SimpleFloatArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array);
			this.value = value;
		}
	}
	
	public static final class FloatEqArrayFilter extends SimpleFloatArrayFilter {

		public FloatEqArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] == value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class FloatNeqArrayFilter extends SimpleFloatArrayFilter {

		public FloatNeqArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] != value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class FloatLtArrayFilter extends SimpleFloatArrayFilter {

		public FloatLtArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] < value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class FloatLtEqArrayFilter extends SimpleFloatArrayFilter {

		public FloatLtEqArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] <= value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class FloatGtArrayFilter extends SimpleFloatArrayFilter {

		public FloatGtArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {			
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] > value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class FloatGtEqArrayFilter extends SimpleFloatArrayFilter {

		public FloatGtEqArrayFilter(RowIdSink rowIdSink, long startRowId, float[] array, float value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] >= value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
}
