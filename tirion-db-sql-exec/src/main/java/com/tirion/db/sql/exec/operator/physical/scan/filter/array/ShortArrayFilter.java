/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.sql.exec.operator.physical.scan.filter.array;

import java.util.Set;

import com.tirion.db.sql.exec.operator.physical.scan.rowid.sink.RowIdSink;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic, Copyright (C) All Rights Reserved
 */
public abstract class ShortArrayFilter extends AbstractArrayFilter {

	protected final short[] array;
	
	public ShortArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array) {
		super(rowIdSink, startRowId);
		this.array = array;
	}
	
	public static final class ShortBetweenArrayFilter extends ShortArrayFilter {

		private final short low;
		private final short high;
		
		public ShortBetweenArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short low, short high) {
			super(rowIdSink, startRowId, array);
			this.low = low;
			this.high = high;
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(low <= array[i] && array[i] <= high) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ShortInArrayFilter extends ShortArrayFilter {

		private final Set<Short> set;

		public ShortInArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, Set<Short> set) {
			super(rowIdSink, startRowId, array);
			this.set = set;
		}

		@Override
		public void apply() {	
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(set.contains(array[i])) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static abstract class SimpleShortArrayFilter extends ShortArrayFilter {
		
		protected final short value;

		public SimpleShortArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array);
			this.value = value;
		}
	}
	
	public static final class ShortEqArrayFilter extends SimpleShortArrayFilter {

		public ShortEqArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] == value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ShortNeqArrayFilter extends SimpleShortArrayFilter {

		public ShortNeqArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] != value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ShortLtArrayFilter extends SimpleShortArrayFilter {

		public ShortLtArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] < value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ShortLtEqArrayFilter extends SimpleShortArrayFilter {

		public ShortLtEqArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] <= value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ShortGtArrayFilter extends SimpleShortArrayFilter {

		public ShortGtArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {			
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] > value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ShortGtEqArrayFilter extends SimpleShortArrayFilter {

		public ShortGtEqArrayFilter(RowIdSink rowIdSink, long startRowId, short[] array, short value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] >= value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
}
