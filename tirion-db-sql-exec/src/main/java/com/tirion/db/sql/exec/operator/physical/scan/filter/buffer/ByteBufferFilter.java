/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.sql.exec.operator.physical.scan.filter.buffer;

import java.nio.ByteBuffer;
import java.util.Set;

import com.tirion.common.type.Type;
import com.tirion.db.sql.exec.operator.physical.scan.rowid.sink.RowIdSink;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic
 */
public abstract class ByteBufferFilter extends AbstractBufferFilter {

	public ByteBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer) {
		super(rowIdSink, startRowId, startPosition, count, buffer);
	}

	public static final class ByteBetweenBufferFilter extends ByteBufferFilter {

		private final byte low;
		private final byte high;
		
		public ByteBetweenBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer, byte low, byte high) {
			super(rowIdSink, startRowId, startPosition, count, buffer);
			this.low = low;
			this.high = high;
		}

		@Override
		public void apply() {	
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							final byte value = buffer.get(position);
							if(low <= value && value <= high) {
					rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ByteInBufferFilter extends ByteBufferFilter {

		private final Set<Byte> set;

		public ByteInBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer, Set<Byte> set) {
			super(rowIdSink, startRowId, startPosition, count, buffer);
			this.set = set;
		}

		@Override
		public void apply() {	
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							final byte value = buffer.get(position);
							if(set.contains(value)) {
					rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static abstract class SimpleByteBufferFilter extends ByteBufferFilter {
		
		protected final byte value;

		public SimpleByteBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer);
			this.value = value;
		}
	}
	
	public static final class ByteEqBufferFilter extends SimpleByteBufferFilter {

		public ByteEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			long rowId = startRowId;
			int position = startPosition;
			for (int i = 0; i < count; i++) {
							if(buffer.get(position) == value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ByteNeqBufferFilter extends SimpleByteBufferFilter {

		public ByteNeqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.get(position) != value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ByteLtBufferFilter extends SimpleByteBufferFilter {

		public ByteLtBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.get(position) < value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ByteLtEqBufferFilter extends SimpleByteBufferFilter {

		public ByteLtEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.get(position) <= value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ByteGtBufferFilter extends SimpleByteBufferFilter {

		public ByteGtBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.get(position) > value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ByteGtEqBufferFilter extends SimpleByteBufferFilter {

		public ByteGtEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, byte value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
							if(buffer.get(position) >= value) {
								rowIdSink.onRowId(rowId);
				}
				position += Type.BYTE.getWidth();
				++rowId;
			}
		}
	}
}