/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.store.builder.stats.analyzer.range;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

import com.tirion.common.sequence.array.Array;
import com.tirion.common.type.Type;
import com.tirion.db.store.builder.stats.model.range.Comparators;
import com.tirion.db.store.builder.stats.model.range.LongRange;
import com.tirion.db.store.builder.stats.model.range.Range;
import com.tirion.db.store.builder.stats.model.range.Ranges;

/**
 * This class was autogenerated. Do not edit manually.
 */
public final class LongRangeAnalyzer extends AbstractRangeAnalyzer {

	public LongRangeAnalyzer(RangesConf conf) {
		super(conf);
	}

	@Override
	public Ranges analyze(Array array) {
		List<LongRange> ranges = new ArrayList<LongRange>();
		long[] input = cloneAndSortArray((long[])array.getUnderlying());
		int index = 1;
		while(true) {
			if(index == input.length) {
				break;
			}
			long start = input[index - 1];
			long end = input[index];
			if(shouldIncludeSkipRange(start, end)) {
				ranges.add(new LongRange(start, end));
			}
			++index;
		}
		if(ranges.isEmpty()) {
			return null;
		}
		Ranges result = new Ranges(Type.LONG);
		for(Range range : tuneSkipRanges(ranges)) {
			result.append(range);
		}
		return result;
	}
	
	private List<LongRange> tuneSkipRanges(List<LongRange> ranges) {
		if(ranges.size() <= getMaxSkipRangesPerPage()) {
			return ranges;
		}
		Collections.sort(ranges, new Comparators.LongRangeComparator());
		int count = Math.min(getMaxSkipRangesPerPage(), ranges.size());
		List<LongRange> result = new ArrayList<LongRange>();
		for (int i = ranges.size() - 1; i >= ranges.size() - count; i--) {
			result.add(ranges.get(i));
		}
		return result;
	}
	
	private boolean shouldIncludeSkipRange(long start, long end) {
		return (end - start - 1) >= 
					getSkipRangeDiscreteThreshold();
			}
	
	private long[] cloneAndSortArray(long[] input) {
		long[] clone = new long[input.length];
		System.arraycopy(input, 0, clone, 0, input.length);
		Arrays.sort(clone);
		return clone;
	}
}
