/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.store.builder.stats.analyzer.minmax;

import com.tirion.common.bitmap.Bitmap;
import com.tirion.common.sequence.array.Array;
import com.tirion.db.store.builder.stats.model.minmax.ByteMinMax;
import com.tirion.db.store.builder.stats.model.minmax.MinMax;

/**
 * This class was autogenerated. Do not edit manually.
 */
public final class ByteMinMaxAnalyzer implements MinMaxAnalyzer {

	@Override
	public MinMax analyze(Array array) {
		byte[] input = (byte[]) array.getUnderlying();
		Bitmap nullBitmap = array.getNullBitmap();
		if(nullBitmap != null) {
			return analyzeNulls(input, nullBitmap);
		} else {
			return analyzeNoNulls(input);
		}
	}
	
	private MinMax analyzeNulls(byte[] input, Bitmap nullBitmap) {
		byte min = Byte.MAX_VALUE;
		byte max = Byte.MIN_VALUE;
		for (int i = 0; i < input.length; i++) {
			if(nullBitmap.isSet(i)) {					
				continue;
			}
			final byte value = input[i];			
			min =  (byte) 				   Math.min(value, min);
			max =  (byte) 				   Math.max(value, max);
		}
		return new ByteMinMax(min, max);
	}
	
	private MinMax analyzeNoNulls(byte[] input) {
		byte min = Byte.MAX_VALUE;
		byte max = Byte.MIN_VALUE;
		for (int i = 0; i < input.length; i++) {
			final byte value = input[i];			
			min =  (byte) 				   Math.min(value, min);
			max =  (byte) 				   Math.max(value, max);
		}
		return new ByteMinMax(min, max);
	}
}
