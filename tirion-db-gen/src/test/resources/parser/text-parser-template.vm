package com.tirion.db.store.builder.parser;

import com.tirion.common.sequence.Spec;
import com.tirion.common.sequence.array.Array;
import com.tirion.common.sequence.array.NativeArray;
import com.tirion.common.type.Type;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic, Copyright (C) All Rights Reserved
 */
public final class ${largeTypeName}Parser extends AbstractParser {

	public ${largeTypeName}Parser(String nullString) {
		super(nullString);
	}

	@Override
	public Array parse(String[][] splits, int startRow, int endRow, final int columnIndex) {
		final int rowCount = endRow - startRow;
		
		final boolean[] nulls = super.getNulls(splits, startRow, endRow, columnIndex);
		
		${smallTypeName}[] result = new ${smallTypeName}[rowCount];
		int index = 0;
		if(nulls == null) {
			for (int i = startRow; i < endRow; i++) {
				result[index++] = ${largeTypeName}.parse${typeName}(splits[i][columnIndex]);
			}	
		} else {
			for (int i = startRow; i < endRow; i++) {
				if(!nulls[i]) {					
					result[index++] = ${largeTypeName}.parse${typeName}(splits[i][columnIndex]);
				}
			}
		}
		return new NativeArray(new Spec(Type.${capsTypeName}, result.length, false, getBitmap(nulls)), result);
	}
}
