package com.naxx.db.store.loader.indexer;

import java.util.HashMap;
import java.util.Map;

import com.naxx.common.array.Array;
import com.naxx.common.array.Arrays;
import com.naxx.db.store.bitmap.Bitmap;
import com.naxx.db.store.bitmap.Bitmaps;
import com.naxx.db.store.bitmap.CompressedBitmap;

/**
 * This class was autogenerated. Do not edit manually.
 */
public final class ${largeTypeName}BmIndexer implements BmIndexer<${largeTypeName}> {

	@Override
	public Map<${largeTypeName}, Bitmap> build(Array array) {
		Map<${largeTypeName}, Bitmap> map = new HashMap<${largeTypeName}, Bitmap>();
		${smallTypeName}[] arr = (${smallTypeName}[]) array.getUnderlying();
		for (int i = 0; i < arr.length; i++) {
			Bitmap bitmap = map.get(arr[i]);
			if(bitmap == null) {
				bitmap = new CompressedBitmap();
				map.put(arr[i], bitmap);
			}
			bitmap.set(i);
		}
		return map;
	}

	@Override
	public Map<${largeTypeName}, Bitmaps> build(Arrays arrays) {
		Map<${largeTypeName}, Bitmaps> map = new HashMap<${largeTypeName}, Bitmaps>();
		for (int i = 0; i < arrays.getCount(); i++) {
			${smallTypeName}[] arr = (${smallTypeName}[]) arrays.get(i).getUnderlying();			
			for (int j = 0; j < arr.length; j++) {
				Bitmaps bitmaps = map.get(arr[j]);				
				if(bitmaps == null) {
					bitmaps = new Bitmaps();
					map.put(arr[j], bitmaps);
				}
				fillWillNulls(bitmaps, i-1);
				if(!bitmaps.has(i)) {
					bitmaps.append(new CompressedBitmap());					
				}
				bitmaps.get(i).set(j);
			}
		}
		return map;
	}
	
	private void fillWillNulls(Bitmaps bitmaps, int index) {
		while(!bitmaps.has(index)) {
			bitmaps.append((Bitmap)null);
		}
	}
}



