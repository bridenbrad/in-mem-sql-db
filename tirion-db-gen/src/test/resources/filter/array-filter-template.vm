package com.tirion.db.sql.exec.operator.physical.scan.filter.array;

import java.util.Set;

import com.tirion.db.sql.exec.operator.physical.scan.rowid.sink.RowIdSink;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic, Copyright (C) All Rights Reserved
 */
public abstract class ${largeTypeName}ArrayFilter extends AbstractArrayFilter {

	protected final ${smallTypeName}[] array;
	
	public ${largeTypeName}ArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array) {
		super(rowIdSink, startRowId);
		this.array = array;
	}
	
	public static final class ${largeTypeName}BetweenArrayFilter extends ${largeTypeName}ArrayFilter {

		private final ${smallTypeName} low;
		private final ${smallTypeName} high;
		
		public ${largeTypeName}BetweenArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} low, ${smallTypeName} high) {
			super(rowIdSink, startRowId, array);
			this.low = low;
			this.high = high;
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(low <= array[i] && array[i] <= high) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}InArrayFilter extends ${largeTypeName}ArrayFilter {

		private final Set<${largeTypeName}> set;

		public ${largeTypeName}InArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, Set<${largeTypeName}> set) {
			super(rowIdSink, startRowId, array);
			this.set = set;
		}

		@Override
		public void apply() {	
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(set.contains(array[i])) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static abstract class Simple${largeTypeName}ArrayFilter extends ${largeTypeName}ArrayFilter {
		
		protected final ${smallTypeName} value;

		public Simple${largeTypeName}ArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array);
			this.value = value;
		}
	}
	
	public static final class ${largeTypeName}EqArrayFilter extends Simple${largeTypeName}ArrayFilter {

		public ${largeTypeName}EqArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] == value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}NeqArrayFilter extends Simple${largeTypeName}ArrayFilter {

		public ${largeTypeName}NeqArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] != value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}LtArrayFilter extends Simple${largeTypeName}ArrayFilter {

		public ${largeTypeName}LtArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] < value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}LtEqArrayFilter extends Simple${largeTypeName}ArrayFilter {

		public ${largeTypeName}LtEqArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] <= value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}GtArrayFilter extends Simple${largeTypeName}ArrayFilter {

		public ${largeTypeName}GtArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {			
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] > value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}GtEqArrayFilter extends Simple${largeTypeName}ArrayFilter {

		public ${largeTypeName}GtEqArrayFilter(RowIdSink rowIdSink, long startRowId, ${smallTypeName}[] array, ${smallTypeName} value) {
			super(rowIdSink, startRowId, array, value);
		}

		@Override
		public void apply() {
			long rowId = getStartRowId();
			for (int i = 0; i < array.length; i++) {
				if(array[i] >= value) {
					getRowIdSink().onRowId(rowId);
				}
				++rowId;
			}
		}
	}
}
