package com.tirion.db.sql.exec.operator.physical.scan.filter.buffer;

import java.nio.ByteBuffer;
import java.util.Set;

import com.tirion.common.type.Type;
import com.tirion.db.sql.exec.operator.physical.scan.rowid.sink.RowIdSink;

/**
 * This class was autogenerated. Do not edit manually.
 * 
 * @author Veljko Zivkovic
 */
public abstract class ${largeTypeName}BufferFilter extends AbstractBufferFilter {

	public ${largeTypeName}BufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer) {
		super(rowIdSink, startRowId, startPosition, count, buffer);
	}

	public static final class ${largeTypeName}BetweenBufferFilter extends ${largeTypeName}BufferFilter {

		private final ${smallTypeName} low;
		private final ${smallTypeName} high;
		
		public ${largeTypeName}BetweenBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer, ${smallTypeName} low, ${smallTypeName} high) {
			super(rowIdSink, startRowId, startPosition, count, buffer);
			this.low = low;
			this.high = high;
		}

		@Override
		public void apply() {	
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				final ${smallTypeName} value = buffer.get${typeName}(position);
			#else
				final ${smallTypeName} value = buffer.get(position);
			#end
				if(low <= value && value <= high) {
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}InBufferFilter extends ${largeTypeName}BufferFilter {

		private final Set<${largeTypeName}> set;

		public ${largeTypeName}InBufferFilter(RowIdSink rowIdSink, long startRowId, int startPosition, int count, ByteBuffer buffer, Set<${largeTypeName}> set) {
			super(rowIdSink, startRowId, startPosition, count, buffer);
			this.set = set;
		}

		@Override
		public void apply() {	
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				final ${smallTypeName} value = buffer.get${typeName}(position);
			#else
				final ${smallTypeName} value = buffer.get(position);
			#end				
				if(set.contains(value)) {
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static abstract class Simple${largeTypeName}BufferFilter extends ${largeTypeName}BufferFilter {
		
		protected final ${smallTypeName} value;

		public Simple${largeTypeName}BufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer);
			this.value = value;
		}
	}
	
	public static final class ${largeTypeName}EqBufferFilter extends Simple${largeTypeName}BufferFilter {

		public ${largeTypeName}EqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			long rowId = startRowId;
			int position = startPosition;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				if(buffer.get${typeName}(position) == value) {
			#else
				if(buffer.get(position) == value) {
			#end
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}NeqBufferFilter extends Simple${largeTypeName}BufferFilter {

		public ${largeTypeName}NeqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				if(buffer.get${typeName}(position) != value) {
			#else
				if(buffer.get(position) != value) {
			#end
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}LtBufferFilter extends Simple${largeTypeName}BufferFilter {

		public ${largeTypeName}LtBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				if(buffer.get${typeName}(position) < value) {
			#else
				if(buffer.get(position) < value) {
			#end
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}LtEqBufferFilter extends Simple${largeTypeName}BufferFilter {

		public ${largeTypeName}LtEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				if(buffer.get${typeName}(position) <= value) {
			#else
				if(buffer.get(position) <= value) {
			#end
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}GtBufferFilter extends Simple${largeTypeName}BufferFilter {

		public ${largeTypeName}GtBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				if(buffer.get${typeName}(position) > value) {
			#else
				if(buffer.get(position) > value) {
			#end
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
	
	public static final class ${largeTypeName}GtEqBufferFilter extends Simple${largeTypeName}BufferFilter {

		public ${largeTypeName}GtEqBufferFilter(RowIdSink rowIdSink, long startRowId, int position, int count, ByteBuffer buffer, ${smallTypeName} value) {
			super(rowIdSink, startRowId, position, count, buffer, value);
		}

		@Override
		public void apply() {
			int position = startPosition;
			long rowId = startRowId;
			for (int i = 0; i < count; i++) {
			#if(!$largeTypeName.contains("Byte"))
				if(buffer.get${typeName}(position) >= value) {
			#else
				if(buffer.get(position) >= value) {
			#end
					rowIdSink.onRowId(rowId);
				}
				position += Type.${capsTypeName}.getWidth();
				++rowId;
			}
		}
	}
}