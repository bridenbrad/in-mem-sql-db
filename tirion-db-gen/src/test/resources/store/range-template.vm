package com.tirion.db.store.builder.stats.model.range;

import java.text.DecimalFormat;
import com.tirion.common.type.Type;

import org.codehaus.jackson.annotate.JsonProperty;

/**
 * This class was autogenerated. Do not edit manually.
 */
public final class ${largeTypeName}Range implements Range {

	@JsonProperty
	private final ${smallTypeName} low;
	@JsonProperty
	private final ${smallTypeName} high;

	public ${largeTypeName}Range(${smallTypeName} low, ${smallTypeName} high) {
		super();
		this.low = low;
		this.high = high;
	}
	
	/**
	 * Returns true if given range is subset of this range.
	 */
	public boolean contains(${smallTypeName} lowValue, ${smallTypeName} highValue) {
		return low < lowValue && highValue < high;
	}
	
	/**
	 * Number of values between low and high.
	 * Exact value.
	 */
	public ${smallTypeName} getDiff() {
		return #if($smallTypeName.contains("byte")) (byte) #end 
			   #if($smallTypeName.contains("short")) (short) #end (getHigh() - getLow() - 1);
	}

	public ${smallTypeName} getLow() {
		return low;
	}

	public ${smallTypeName} getHigh() {
		return high;
	}
	
	@Override
	public Type getType() {
		return Type.${capsTypeName};
	}

	@Override
	public long sizeInBytes() {
		return ${typeSize} + ${typeSize};
	}

	@Override
	public String toString() {
		#if($smallTypeName.contains("float") || $smallTypeName.contains("double")) 
		DecimalFormat format = new DecimalFormat("#[[#.##]]#");
		return format.format(getLow()) + ".." + format.format(getHigh());
		#else 		
		return getLow() + ".." + getHigh();
		#end
	}
}

