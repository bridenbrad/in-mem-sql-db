package com.tirion.db.store.builder.stats.analyzer.minmax;

import com.tirion.common.bitmap.Bitmap;
import com.tirion.common.sequence.array.Array;
import com.tirion.db.store.builder.stats.model.minmax.${largeTypeName}MinMax;
import com.tirion.db.store.builder.stats.model.minmax.MinMax;

/**
 * This class was autogenerated. Do not edit manually.
 */
public final class ${largeTypeName}MinMaxAnalyzer implements MinMaxAnalyzer {

	@Override
	public MinMax analyze(Array array) {
		${smallTypeName}[] input = (${smallTypeName}[]) array.getUnderlying();
		Bitmap nullBitmap = array.getNullBitmap();
		if(nullBitmap != null) {
			return analyzeNulls(input, nullBitmap);
		} else {
			return analyzeNoNulls(input);
		}
	}
	
	private MinMax analyzeNulls(${smallTypeName}[] input, Bitmap nullBitmap) {
		${smallTypeName} min = ${largeTypeName}.MAX_VALUE;
		${smallTypeName} max = ${largeTypeName}.MIN_VALUE;
		for (int i = 0; i < input.length; i++) {
			if(nullBitmap.isSet(i)) {					
				continue;
			}
			final ${smallTypeName} value = input[i];			
			min = #if($smallTypeName.contains("byte")) (byte) #end 
				  #if($smallTypeName.contains("short")) (short) #end Math.min(value, min);
			max = #if($smallTypeName.contains("byte")) (byte) #end 
				  #if($smallTypeName.contains("short")) (short) #end Math.max(value, max);
		}
		return new ${largeTypeName}MinMax(min, max);
	}
	
	private MinMax analyzeNoNulls(${smallTypeName}[] input) {
		${smallTypeName} min = ${largeTypeName}.MAX_VALUE;
		${smallTypeName} max = ${largeTypeName}.MIN_VALUE;
		for (int i = 0; i < input.length; i++) {
			final ${smallTypeName} value = input[i];			
			min = #if($smallTypeName.contains("byte")) (byte) #end 
				  #if($smallTypeName.contains("short")) (short) #end Math.min(value, min);
			max = #if($smallTypeName.contains("byte")) (byte) #end 
				  #if($smallTypeName.contains("short")) (short) #end Math.max(value, max);
		}
		return new ${largeTypeName}MinMax(min, max);
	}
}
