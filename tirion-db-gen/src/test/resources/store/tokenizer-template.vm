package com.tirion.db.store.builder.tokenizer;

import java.nio.ByteBuffer;

import com.tirion.common.bitmap.Bitmap;
import com.tirion.common.sequence.Spec;
import com.tirion.common.sequence.array.Array;
import com.tirion.common.sequence.array.NativeArray;
import com.tirion.common.sequence.buffer.Buffer;
import com.tirion.common.type.Type;
import com.tirion.db.store.column.token.TokenMap;

/**
 * This class was autogenerated. Do not edit manually.
 */
public abstract class ${largeTypeName}Tokenizer implements Tokenizer {

	public static final class ${largeTypeName}ToByteTokenizer extends ${largeTypeName}Tokenizer {
		
		private final TokenMap<Byte, ${largeTypeName}> tokenMap;

		public ${largeTypeName}ToByteTokenizer(TokenMap<Byte, ${largeTypeName}> tokenMap) {
			super();
			this.tokenMap = tokenMap;
		}

		@Override
		public Array tokenize(Array array) {
			final Bitmap nullBitmap = array.getNullBitmap();
			${smallTypeName}[] dataArray = (${smallTypeName}[]) array.getUnderlying();
			byte[] tokenArray = new byte[dataArray.length];
			for (int i = 0; i < dataArray.length; i++) {
				if(nullBitmap == null || !nullBitmap.isSet(i)) {						
					tokenArray[i] = tokenMap.getTokenForAllocate(dataArray[i]);
				}
			}
			return new NativeArray(new Spec(Type.BYTE, tokenArray.length, false, nullBitmap), tokenArray);
		}

		@Override
		public Array detokenize(Array tokenArray) {
			final Bitmap nullBitmap = tokenArray.getNullBitmap();
			byte[] tokens = (byte[]) tokenArray.getUnderlying();
			${smallTypeName}[] data = new ${smallTypeName}[tokens.length];
			for (int i = 0; i < data.length; i++) {
				if(nullBitmap == null || !nullBitmap.isSet(i)) {								
					data[i] = tokenMap.getValueFor(tokens[i], true);
				}
			}
			return new NativeArray(new Spec(Type.${capsTypeName}, data.length, false, nullBitmap), data);
		}

		@Override
		public Array detokenize(Buffer buffer) {
			final int count = buffer.getCount();
			final Bitmap nullBitmap = buffer.getNullBitmap();
			ByteBuffer buff = buffer.getUnderlying();
			
			${smallTypeName}[] data = new ${smallTypeName}[buffer.getCount()];
			int position = buffer.getPosition();
			for (int i = 0; i < count; i++) {
				if(nullBitmap == null || !nullBitmap.isSet(i)) {								
					data[i] = tokenMap.getValueFor(buff.get(position), true);
				}
				++position;
			}
			return new NativeArray(new Spec(Type.${capsTypeName}, data.length, false, nullBitmap), data);
		}
	}
	
#if(!$largeTypeName.contains("Short"))
	public static final class ${largeTypeName}ToShortTokenizer extends ${largeTypeName}Tokenizer {
		
		private final TokenMap<Short, ${largeTypeName}> tokenMap;

		public ${largeTypeName}ToShortTokenizer(TokenMap<Short, ${largeTypeName}> tokenMap) {
			super();
			this.tokenMap = tokenMap;
		}

		@Override
		public Array tokenize(Array array) {
			final Bitmap nullBitmap = array.getNullBitmap();
			${smallTypeName}[] dataArray = (${smallTypeName}[]) array.getUnderlying();
			short[] tokenArray = new short[dataArray.length];
			for (int i = 0; i < dataArray.length; i++) {
				if(nullBitmap == null || !nullBitmap.isSet(i)) {						
					tokenArray[i] = tokenMap.getTokenForAllocate(dataArray[i]);
				}
			}
			return new NativeArray(new Spec(Type.SHORT, tokenArray.length, false, nullBitmap), tokenArray);
		}

		@Override
		public Array detokenize(Array tokenArray) {
			final Bitmap nullBitmap = tokenArray.getNullBitmap();
			short[] tokens = (short[]) tokenArray.getUnderlying();
			${smallTypeName}[] data = new ${smallTypeName}[tokens.length];
			for (int i = 0; i < data.length; i++) {
				if(nullBitmap == null || !nullBitmap.isSet(i)) {								
					data[i] = tokenMap.getValueFor(tokens[i], true	);
				}
			}
			return new NativeArray(new Spec(Type.${capsTypeName}, data.length, false, nullBitmap), data);
		}
		
		@Override
		public Array detokenize(Buffer buffer) {
			final int count = buffer.getCount();
			final Bitmap nullBitmap = buffer.getNullBitmap();
			ByteBuffer buff = buffer.getUnderlying();
			
			${smallTypeName}[] data = new ${smallTypeName}[buffer.getCount()];
			int position = buffer.getPosition();
			for (int i = 0; i < count; i++) {
				if(nullBitmap == null || !nullBitmap.isSet(i)) {								
					data[i] = tokenMap.getValueFor(buff.getShort(position), true);
				}
				position += 2;
			}
			return new NativeArray(new Spec(Type.${capsTypeName}, data.length, false, nullBitmap), data);
		}
	}
#end
}