/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.jdbc;

import java.sql.Array;
import java.sql.Blob;
import java.sql.CallableStatement;
import java.sql.Clob;
import java.sql.Connection;
import java.sql.NClob;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLClientInfoException;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.SQLXML;
import java.sql.Savepoint;
import java.sql.Statement;
import java.sql.Struct;
import java.util.Map;
import java.util.Properties;
import java.util.concurrent.Executor;

/**
 * @author Veljko Zivkovic, Copyright (C) All Rights Reserved
 */
public abstract class AbstractConnection implements Connection {
	
	@Override
	public final void commit() throws SQLException {
	}

	@Override
	public final void rollback() throws SQLException {
	}

	@Override
	public final <T> T unwrap(Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	@Override
	public final CallableStatement prepareCall(String sql) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final String nativeSQL(String sql) throws SQLException {
		return sql;
	}

	@Override
	public final void setAutoCommit(boolean autoCommit) throws SQLException {
	}

	@Override
	public final boolean getAutoCommit() throws SQLException {
		return true;
	}

	@Override
	public final void setReadOnly(boolean readOnly) throws SQLException {
	}

	@Override
	public final boolean isReadOnly() throws SQLException {
		return true;
	}

	@Override
	public final void setCatalog(String catalog) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setTransactionIsolation(int level) throws SQLException {
	}

	@Override
	public final int getTransactionIsolation() throws SQLException {
		return Connection.TRANSACTION_NONE;
	}

	@Override
	public final PreparedStatement prepareStatement(String sql) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public final void clearWarnings() throws SQLException {
	}

	@Override
	public final Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final Map<String, Class<?>> getTypeMap() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setTypeMap(Map<String, Class<?>> map) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setHoldability(int holdability) throws SQLException {
	}

	@Override
	public final int getHoldability() throws SQLException {
		return ResultSet.CLOSE_CURSORS_AT_COMMIT;
	}

	@Override
	public final Savepoint setSavepoint() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final Savepoint setSavepoint(String name) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void rollback(Savepoint savepoint) throws SQLException {
	}

	@Override
	public final void releaseSavepoint(Savepoint savepoint) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final Clob createClob() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final Blob createBlob() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final NClob createNClob() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final SQLXML createSQLXML() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setClientInfo(String name, String value) throws SQLClientInfoException {
	}

	@Override
	public final void setClientInfo(Properties properties) throws SQLClientInfoException {
	}

	@Override
	public final String getClientInfo(String name) throws SQLException {
		return null;
	}

	@Override
	public final Properties getClientInfo() throws SQLException {
		return null;
	}

	@Override
	public final Array createArrayOf(String typeName, Object[] elements) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final Struct createStruct(String typeName, Object[] attributes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setSchema(String schema) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final String getSchema() throws SQLException {
		return "admin";
	}

	@Override
	public final void abort(Executor executor) throws SQLException {
	}

	@Override
	public final void setNetworkTimeout(Executor executor, int milliseconds) throws SQLException {
	}

	@Override
	public final int getNetworkTimeout() throws SQLException {
		return 0;
	}

	@Override
	public final boolean isValid(int timeout) throws SQLException {
		return true;
	}
}
