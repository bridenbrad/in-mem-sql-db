/**
 * Copyright Â© 2013/2014, Veljko Zivkovic
 * All rights reserved.
 *
 * No portion of this file may be reproduced in any form, or by any means, without the prior written
 * consent of the author.
 */
package com.tirion.db.jdbc;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;

/**
 * @author Veljko Zivkovic, Copyright (C) All Rights Reserved
 */
public abstract class AbstractStatement implements Statement {
	
	@Override
	public int getQueryTimeout() throws SQLException {
		return 0;
	}

	@Override
	public void cancel() throws SQLException {
	}

	@Override
	public final <T> T unwrap(Class<T> iface) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}

	@Override
	public final void setMaxRows(int max) throws SQLException {
	}

	@Override
	public final void setEscapeProcessing(boolean enable) throws SQLException {
	}
	
	@Override
	public final boolean isPoolable() throws SQLException {
		return false;
	}

	@Override
	public final boolean isCloseOnCompletion() throws SQLException {
		return true;
	}
	
	@Override
	public final int getMaxRows() throws SQLException {
		return 0;
	}
	
	@Override
	public final int getMaxFieldSize() throws SQLException {
		return 0;
	}
	
	@Override
	public final void setQueryTimeout(int seconds) throws SQLException {
	}

	@Override
	public final SQLWarning getWarnings() throws SQLException {
		return null;
	}

	@Override
	public final void clearWarnings() throws SQLException {
	}

	@Override
	public final void setCursorName(String name) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final int getUpdateCount() throws SQLException {
		return -1;
	}

	@Override
	public final void setFetchDirection(int direction) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final int getFetchDirection() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void setFetchSize(int rows) throws SQLException {;
	}

	@Override
	public final int getFetchSize() throws SQLException {
		return 100;
	}

	@Override
	public final int getResultSetConcurrency() throws SQLException {
		return ResultSet.CONCUR_READ_ONLY;
	}

	@Override
	public final int getResultSetType() throws SQLException {
		return ResultSet.TYPE_FORWARD_ONLY;
	}

	@Override
	public final void addBatch(String sql) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final void clearBatch() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final int[] executeBatch() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean getMoreResults(int current) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final ResultSet getGeneratedKeys() throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final int executeUpdate(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean execute(String sql, int[] columnIndexes) throws SQLException {
		throw new UnsupportedOperationException();
	}

	@Override
	public final boolean execute(String sql, String[] columnNames) throws SQLException {
		throw new UnsupportedOperationException();
	}
	
	@Override
	public final void setMaxFieldSize(int max) throws SQLException {
	}

	@Override
	public final int getResultSetHoldability() throws SQLException {
		return ResultSet.CLOSE_CURSORS_AT_COMMIT;
	}

	@Override
	public final void setPoolable(boolean poolable) throws SQLException {
	}
	
	@Override
	public final void closeOnCompletion() throws SQLException {
	}
}
